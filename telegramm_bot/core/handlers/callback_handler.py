from aiogram import types, Bot
from aiogram import Router
from aiogram import F
from aiogram.fsm.context import FSMContext

from scraper.collect_data import collect_data
from .common_handler_func import edit_article_with_ai_func
from .common_handler_func import show_result_article_func
from .common_handler_func import publish_article_inst_func
from .common_handler_func import process_add_text_to_image_func
from .common_handler_func import publish_article_func

from ..database.orm_query import read_all_today_article, mark_artical_for_prepared_for_reels
from ..keyboards.inline import get_view_kbd, get_title_btn, get_start_inline_kbd
from ..factory.call_factory import ArticleCallbackFactory, ImageCallbackFactory

callback_router = Router()


@callback_router.callback_query(F.data == "nurkz")
async def callback_start_parse_nurkz_call(callback: types.CallbackQuery):
    await callback.message.answer(" üí≠ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ NURKZ –∑–∞–ø—É—â–µ–Ω")
    await collect_data("https://www.nur.kz/")
    await callback.message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ NURKZ –æ–∫–æ–Ω—á–µ–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è /view",
                                  reply_markup=get_view_kbd())


@callback_router.callback_query(F.data == "tengri")
async def callback_start_parse_tengri_call(callback: types.CallbackQuery):
    await callback.message.answer("üí≠ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ Tengri –∑–∞–ø—É—â–µ–Ω")
    await collect_data("https://tengrinews.kz/")
    await callback.message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ Tengri –æ–∫–æ–Ω—á–µ–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è /view",
                                  reply_markup=get_view_kbd())


@callback_router.callback_query(F.data == "informburo")
async def callback_start_parse_informburo_call(callback: types.CallbackQuery):
    await callback.message.answer("üí≠ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ –ò—Ñ–Ω–æ—Ä–º–±—é—Ä–æ –∑–∞–ø—É—â–µ–Ω")
    await collect_data("https://informburo.kz/novosti")
    await callback.message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ –ò—Ñ–Ω–æ—Ä–º–±—é—Ä–æ –æ–∫–æ–Ω—á–µ–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è /view",
                                  reply_markup=get_view_kbd())


@callback_router.callback_query(F.data == "inform")
async def callback_start_parse_inform_call(callback: types.CallbackQuery):
    await callback.message.answer("üí≠ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ –ò—Ñ–Ω–æ—Ä–º–ö–ó –∑–∞–ø—É—â–µ–Ω")
    await collect_data("https://www.inform.kz/lenta/")
    await callback.message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ –ò—Ñ–Ω–æ—Ä–º–ö–ó –æ–∫–æ–Ω—á–µ–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è /view",
                                  reply_markup=get_view_kbd())


@callback_router.callback_query(F.data == "view")
async def get_today_articles_call(callback: types.CallbackQuery):
    """–í—ã–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –≤–æ–∑–ª–µ id –≤ —Å–∫–æ–±–∫–∞—Ö –ø–æ–º–µ—á–µ–Ω–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –¥–ª—è —Ä–∏–ª—Å"""
    await callback.message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è. /edit - –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –¥–ª—è "
                                  "–æ–±—Ä–∞–±–æ—Ç–∫–∏")
    lst_of_article = await read_all_today_article()
    for tpl in lst_of_article:
        id, article_title, is_reels = tpl
        await callback.message.answer(f"{id} ({is_reels})- {article_title}", reply_markup=get_title_btn(article_id=id))

@callback_router.callback_query(ArticleCallbackFactory.filter(F.action == "reels"))
async def mark_for_reels(callback: types.CallbackQuery, callback_data: ArticleCallbackFactory):
    #  –ø–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ç—å—é –¥–ª—è —Ä–∏–ª—Å, –ø–æ–ª–µ prepared_for_reels —Å—Ç–∞–≤–∏–º –≤ 1
    article_id = callback_data.id
    try:
        await mark_artical_for_prepared_for_reels(article_id)
        await callback.answer("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —Ä–∏–ª—Å!", show_alert=False)
    except Exception as e:
        print(f"–°—Ç–∞—Ç—å—è —Å id - {article_id} –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞, –æ—à–±–∫–∞ - {e}")

@callback_router.callback_query(ArticleCallbackFactory.filter())
async def edit_article_call(callback: types.CallbackQuery, callback_data: ArticleCallbackFactory, state: FSMContext):
    """–í—ã–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ –≤ –ò–ò"""
    # await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—å—è - {callback_data.id}")
    flag = await edit_article_with_ai_func(callback.message, state, callback_data.id)
    if not flag:
        await callback.message.answer(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_start_inline_kbd())

@callback_router.callback_query(ImageCallbackFactory.filter())
async def process_add_text_to_image_call(callback: types.CallbackQuery, callback_data: ArticleCallbackFactory,
                                         state: FSMContext):
    await process_add_text_to_image_func(callback.message, state, callback_data.id)


@callback_router.callback_query(F.data == "show_article")
async def show_result_article_call(callback: types.CallbackQuery, state: FSMContext):
    await show_result_article_func(callback.message, state, True)


@callback_router.callback_query(F.data == "is_publish")
async def publish_article_call(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await publish_article_func(callback.message, state, bot, True)
    await callback.message.answer('–°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ')
    await callback.message.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!", reply_markup=get_start_inline_kbd())
    await state.clear()


@callback_router.callback_query(F.data == "is_publish_inst")
async def publish_article_inst_call(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await publish_article_func(callback.message, state, bot, True)  # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ —Ç–µ–ª–µ–≥–∏
    await callback.message.answer('–°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ –¢–µ–ª–µ–≥—Ä–∞–º–º–∞')
    await publish_article_inst_func(callback.message, state, bot, True)  # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –ò–Ω—Å—Ç–µ
    await callback.message.answer('–°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º')
    await callback.message.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!", reply_markup=get_start_inline_kbd())
    await state.clear()


@callback_router.callback_query(F.data == "cansel")
async def cansel_call(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞.')
    await callback.message.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!", reply_markup=get_start_inline_kbd())
    await state.clear()
